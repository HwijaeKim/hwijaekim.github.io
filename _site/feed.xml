<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-26T23:26:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HWIJAE KIM</title><subtitle></subtitle><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><entry><title type="html">프롬프트 엔지니어링 Part.01 - 이론 정리</title><link href="http://localhost:4000/research/prompt-engineering/" rel="alternate" type="text/html" title="프롬프트 엔지니어링 Part.01 - 이론 정리" /><published>2025-03-26T00:00:00+09:00</published><updated>2025-03-26T00:00:00+09:00</updated><id>http://localhost:4000/research/prompt-engineering</id><content type="html" xml:base="http://localhost:4000/research/prompt-engineering/"><![CDATA[<p><br /></p>

<h1 id="개요">개요</h1>
<hr />
<p>회사에 퍼블리셔로 입사 후 AI에이전트(ChatGPT, Claude 등)를 사용하는 빈도가 급격히 증가했다. <br />
물론 이전에도 자주 사용했지만 특히 더 사용하게 되는 것 같다는 생각이 들었다. <br />
이전부터 AI에게 질문을 날리는 것에 대해 크게 생각하지 않고 생각하는 대로 적어 질문을 날리곤 했고, 지금도 마찬가지다. <br />
<br />
그러다보니 원하는 답변을 빠른 시간 내 얻는데 문제가 생기는 경우가 종종 발생했고, 그럴 때마다 조건을 하나하나 추가하면서 추가질문을 던졌다. <br />
이것이 반복되다보니 총 답변 양도 길어지고 그래서 결론적으로 내가 어떤 질문을 했는지, 어디의 어느 코드가 내가 원하는 코드인지 헷갈리는 경우가 많아졌다.<br />
대형언어모델(LLM)에게 질문을 하는 이유가 빠른 시간 내 원하는 해결책, 답변을 얻는 것인데 그 장점이 약간 사라지는 것이다. (물론 인터넷 검색보다는 빠른 경우가 대부분이긴 하다.) <br />
아무튼 나는 LLM에 질문을 던질 때 더 확실하고 정확한 값을 적은 프롬프트로 얻기 위해 <strong>프롬프트 엔지니어링</strong>에 대해 공부해 보기로 했다. <br />
<br />
이 문서는 프롬프트 엔지니어링에 대한 기본적인 개념과 원리를 이해하고, 실제 프롬프트를 작성하는 방법을 정리한다.</p>

<h2 id="참고문서">참고문서</h2>
<ul>
  <li><a href="https://www.promptingguide.ai/kr">promptingguide.ai</a></li>
</ul>

<hr />
<p><br /><br /></p>

<h1 id="프롬프트의-기초">프롬프트의 기초</h1>

<h2 id="기초-프롬프트">기초 프롬프트</h2>
<p>평소의 나는 LLM을 다룰 때 간단한, 거의 1차원적인 프롬프트로 질문한다. <br />
그렇기 때문에 어느 때는 한 번에 만족스럽고 양질의 결과를 얻지만 또 어느 때는 아무리 연속질문을 해도 같은 말만 반복, 원하는 정보를 어지 못할 때도 많다. <br />
모델에 전달하는 프롬프트는 <strong>지시</strong>나 <strong>질문</strong>과 같은 정보와 <strong>맥락</strong>, <strong>입력</strong> 또는 <strong>예시</strong>와 같은 세부사항을 포함할 수 있다. <br />
이러한 구성요소를 사용하여 적절하게 지시하고 더 나은 결과를 얻을 수 있다.
<br /><br />
간단한 예시로 시작해보자! <br />
<br />
<em>Prompt.</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>하늘은
</code></pre></div></div>
<p><em>Output.</em>
<em><sub>(OpenAI ChatGPT-4.5 / 2025.03.26 17:44)</sub></em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>하늘은 푸르고, 높고, 무한히 넓으며 때로는 맑고 화창하지만, 때로는 흐리고 어두우며 비를 품고 있기도 합니다.
하늘은 우리의 감정을 닮아 있습니다. 지금 당신이 올려다본 하늘은 어떤가요?
</code></pre></div></div>

<p>위와같이 LLM은 “하늘은”이라는 한 단어만 가지고 맥락을 파악하고 글을 이어나간다. <br />
이 결과물은 화자가 예상하지 못한 답변을 내거나 원하는 답과는 거리가 있을 수 있다. <br />
<br />
이를 통해 LLM에게 더 자세한 문맥과 구체적인 요구사항을 지시하는 것이 얼마나 중요한 것인지 알 수 있게 됐다. <br />
<br />
한 발자국 더 나아가 보자! <br />
<br />
<em>Prompt.</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>문장을 완성해 줘:
하늘은
</code></pre></div></div>
<p><em>Output.</em>
<em><sub>(OpenAI ChatGPT-4.5 / 2025.03.26 17:44)</sub></em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>하늘은 푸른 바다처럼 끝없이 펼쳐져 있었다.
</code></pre></div></div>
<p>출력조건 한 줄을 추가한 것으로도 화자가 의도한 답변에 근접해진 것을 볼 수 있다. <br />
이와같이 LLM에게 작업을 수행하도록 지시하기 위해 최적의 프롬프트를 설계는 접근 방식을 <strong>프롬프트 엔지니어링</strong>이라고 한다.</p>

<h2 id="프롬프트-형식">프롬프트 형식</h2>
<p>일반적으로 LLM에게 던지는 프롬프트는 다음과 같은 형식을 따른다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;질문&gt;? or &lt;지시&gt;
</code></pre></div></div>

<p>그리고 이번에 공부하며 새롭게 알게된 사실로 질의응답(QA) 형식으로도 작성이 가능하다는 것이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Q: &lt;질문&gt;?
A:
</code></pre></div></div>
<p>이런 방식의 프롬프트 수행을 <strong>제로샷 프롬프팅(zero-shot prompting)</strong>이라 한다고 한다. <br />
즉, 어떤 예시나 설명 없이 직접 LLM에게 응답을 요구하는 것… <br />
대부분의 LLM에는 제로샷 프롬프팅을 수행할 수 있는 기능이 있지만 해당 작업의 복잡성과 모델이 가진 지식에 따라 다른 결과를 만들어 내기도 한다. <br />
<br />
위를 응용한 인기 있고 효과적인 프롬프팅 기술 중 하나는 모범예시(시연 등)를 제공하는 <strong>퓨샷 프롬프팅(few-shot prompting)</strong>이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;질문&gt;?
&lt;답변&gt;
&lt;질문&gt;?
&lt;답변&gt;
&lt;질문&gt;?
&lt;답변&gt;
&lt;질문&gt;?

//QA 형식을 따른다면
Q: &lt;질문&gt;?
A: &lt;답변&gt;
Q: &lt;질문&gt;?
A: &lt;답변&gt;
Q: &lt;질문&gt;?
A: &lt;답변&gt;
Q: &lt;질문&gt;?
A: //마지막 A는 LLM이 답변
</code></pre></div></div>
<p>물론 무조건 QA 형식을 따라야 하는 것은 아니다. 주어진 작업에 따른 적절한 형식을 사용하는 것이 좋다. <br />
예시로 간단한 분류를 통해 모범 예시를 제공할 수도 있다. <br />
<br />
<em>Prompt.</em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>맛있다 // 긍정
맛 없다 // 부정
이 피자 너무 훌륭해 // 긍정
이 고구마 진짜 끔찍하네! //
</code></pre></div></div>

<p><em>Output.</em>
<em><sub>(OpenAI ChatGPT-4.5 / 2025.03.26 22:42)</sub></em></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>부정
</code></pre></div></div>
<p><strong><sub>(참고로 예시의 답을 반대로 적으면 결과는 “긍정”으로 나온다)</sub></strong>
이와 같이 LLM에게 몇 번의 모범 예시를 보이면 퓨삿 프롬프팅은 문맥에 맞는 학습을 하는 것을 알 수 있다.</p>

<hr />
<p><br /><br /></p>

<h1 id="프롬프트의-구성-요소">프롬프트의 구성 요소</h1>
<p>여러 AI에이전트를 사용하다 보면 프롬프트에는 특정 구성 요소들이 있다는 것을 알 수 있다. <br />
<br />
프롬프트에는 대표적으로 다음 구성요소가 있는데:</p>
<ul>
  <li><strong>지시(Instruction)</strong>: 모델이 수행할 특정 작업 또는 지시</li>
  <li><strong>문맥</strong>: 더 나은 응답을 위해 모델을 조종할 수 있는 외부 정보나 추가 문맥(예시 등)</li>
  <li><strong>입력 데이터</strong>: 응답받고자 하는 입력이나 질문(코드 등)</li>
  <li><strong>출력 지시자</strong>: 출력의 유형이나 형식</li>
</ul>

<p><br />
위 네 가지 요소가 프롬프트에 모두 필요한 것은 아니지만 분명 도움은 될 것이다.</p>

<hr />
<p><br /><br /></p>

<h1 id="프롬프트-설계에-관한-일반적인-팁">프롬프트 설계에 관한 일반적인 팁</h1>
<h2 id="시작은-간단하게">시작은 간단하게</h2>
<p>프롬프트 설계를 시작할 때는 이 과정이 최적의 결과를 얻기 위해 많은 실험이 필요한 반복과정임을 명심해야 한다. <br />
OpenAI에서 제공하는 Playground로 간단하게 시작해보자!</p>
<ul>
  <li><a href="https://platform.openai.com/playground">OpenAI Playground 바로가기</a></li>
</ul>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Research" /><category term="prompt-engineering" /><category term="llm" /><category term="ai" /><category term="chatgpt" /><category term="prompt" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">사이드카 프로젝트 Ep.02 - 개발 컴포넌트 분배</title><link href="http://localhost:4000/side-car-project-2025/sidecar02_2/" rel="alternate" type="text/html" title="사이드카 프로젝트 Ep.02 - 개발 컴포넌트 분배" /><published>2025-03-20T00:00:00+09:00</published><updated>2025-03-20T00:00:00+09:00</updated><id>http://localhost:4000/side-car-project-2025/sidecar02_2</id><content type="html" xml:base="http://localhost:4000/side-car-project-2025/sidecar02_2/"><![CDATA[<p><br /></p>

<h1 id="개요">개요</h1>
<p>오늘은 개발자들끼리 모여 간단한 컴포넌트 관련 회의를 했다. <br />
아직 기획, 디자인 모두 나오기 전이라 필수적으로 요구되는 컴포넌트(버튼, 인풋 등)에 대한 기본적인 틀만 잡을 수 있도록 파트분배를 진행했다.</p>

<p><br /></p>

<h1 id="회의-내용">회의 내용</h1>
<p><img src="/assets/images/posts_img/side-car-pj-2025-01/02/components.webp" alt="도출된 컴포넌트" />
컴포넌트는 다음과 같이 토출되었다. <br />
나는 그중 버튼, 인풋, 투두리스트(인풋, 체크박스) 컴포넌트를 담당했다. <br />
처음 해봐서 어려워 하는 나에게 감사하게도 배려를 해주셔서 비교적 간단한 컴포넌트를 배정받았다. <br />
<br /><br /><br /></p>

<h1 id="오늘의-회고">오늘의 회고</h1>
<p>회의가 끝난 후 막막한 감정이 제일 많이 들었다. <br />
어디서부터 어떻게 코드를 작성해야 할지 도저히 감 조차 잡히지 않았지만 어떻게 해서든 최대한 만들어보고 싶다. <br />
우선 React 관련 강의와 AI에이전트, 인터넷 검색을 통해 최대한 학습해보려 하는 중이다.
<br />
일단 컴포넌트 제작 자체는 회사에서 진행 중인 프로젝트에서 컴포넌트를 만드는 것과 살짝은 비슷한 것 같기도 하다. React 기반이라는 것을 제외한다면 큰 논리는 비슷한 것 같다. (사실 React가 생각보다 파일구조, 작성방법이 생소해서 아직도 애를 먹고 있다ㅎ..) <br />
문제는 DB와 연동하는 것이다. 계원에서 한학기 동안 짧게 백엔드 강의를 수강했지만 응용이 굉장히 어려운 것 같다..백엔드 개발자분께 어떤 요청을 날리고 받아야 하는지 정리해서 알려드려야 하는데 애초에 컴포넌트에서 어떻게 요청을 받고 날리는지도 모른다^^…… <br />
지금은 퍼블영역</p>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="side-car-project-2025" /><category term="side-project" /><category term="frontend" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">사이드카 프로젝트 Ep.01 - 시작</title><link href="http://localhost:4000/side-car-project-2025/sidecar01_1/" rel="alternate" type="text/html" title="사이드카 프로젝트 Ep.01 - 시작" /><published>2025-03-17T00:00:00+09:00</published><updated>2025-03-17T00:00:00+09:00</updated><id>http://localhost:4000/side-car-project-2025/sidecar01_1</id><content type="html" xml:base="http://localhost:4000/side-car-project-2025/sidecar01_1/"><![CDATA[<p><br /></p>

<h1 id="개요">개요</h1>
<p>첫 직장 입사 후 개인역량이 많이 부족하다는 것을 느끼고 맨땅에 헤딩 격으로 시작한 React기반 웹앱 개발 프로젝트. <br />
참고로 React는 프로젝트 생성만 해봤지, 그 외에는 아무 것도 모름. 실시간으로 공부하면서 진행 할 예정</p>

<p><br /></p>

<h1 id="프로젝트-소개">프로젝트 소개</h1>
<p>6명의 팀원(기획1, 디자인1, 프론트3, 백엔드1)으로 구성되어 진행됨</p>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="side-car-project-2025" /><category term="side-project" /><category term="frontend" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">웹 접근성</title><link href="http://localhost:4000/research/web-accessibility/" rel="alternate" type="text/html" title="웹 접근성" /><published>2025-02-20T00:00:00+09:00</published><updated>2025-02-20T00:00:00+09:00</updated><id>http://localhost:4000/research/web-accessibility</id><content type="html" xml:base="http://localhost:4000/research/web-accessibility/"><![CDATA[<p><br /></p>

<h1 id="웹-접근성이란">웹 접근성이란</h1>
<p>장애인이나 고령자들이 웹 사이트에서 제공하는 정보를 비장애인과 동등하게 접근하고 이용할 수 있도록 보장하는 것
<br />
국제 웹 표준기구(W3C)에서 제정한 표준안, 총 33개의 항목으로 평가한다.</p>

<p><br /></p>

<h2 id="웹-접근성-준수-고려사항">웹 접근성 준수 고려사항</h2>
<h3 id="시각">시각</h3>
<p>실명, 색각 이상, 다양한 형태의 저시력을 포함한 장애
<br /></p>

<h3 id="이동성">이동성</h3>
<p>특정 조건으로 인한 근육 속도 저하, 손으 쓰기 어렵거나 힘든 상태
<br /></p>

<h3 id="청각">청각</h3>
<p>영상, 음성 콘텐츠에 자막, 원고, 수화등의 대체수단 부재로 인한 인식불가능 상태
<br /></p>

<h3 id="인지">인지</h3>
<p>문제해결과 논리 능력, 집중력, 기억력에 문제(난독증, 난산증 등)
<br /></p>

<h2 id="사용되는-보조기술">사용되는 보조기술</h2>
<ul>
  <li>스크린 리더</li>
  <li>화면 확대 도구</li>
  <li>음성 인식</li>
  <li>키보드 오버레이</li>
</ul>

<hr />
<p><br /></p>

<h1 id="기본적인-웹-접근성-준수-가이드">기본적인 웹 접근성 준수 가이드</h1>
<h2 id="적절한-마크업-시맨틱-태그-사용">적절한 마크업 시맨틱 태그 사용</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;header&gt;, &lt;nav&gt;., &lt;main&gt;, &lt;section&gt;, &lt;article&gt;, &lt;footer&gt;</code>와 같이 스크린 리더가 각 섹션의 역할을 인식할 수 있도록 적절한 시맨틱 태그를 사용해야 한다.</li>
  <li>제목태그 사용 <code class="language-plaintext highlighter-rouge">&lt;h1&gt; ~ &lt;h6&gt;</code></li>
</ul>

<h2><br /></h2>
<p><br /></p>

<p>test2 branch
test2 branch github desktop</p>

<h1 id="중요하게-알아야-할-웹-접근성-항목">중요하게 알아야 할 웹 접근성 항목</h1>
<h2 id="텍스트-외-콘텐츠에-대체-텍스트를-제공하여-이해할-수-있도록-해야-한다">텍스트 외 콘텐츠에 대체 텍스트를 제공하여 이해할 수 있도록 해야 한다.</h2>
<ul>
  <li>
    <p>테이블, 이미지 등에 대한 대체 텍스트를 꼭 명시하여야 함. <br />
(주석, <code class="language-plaintext highlighter-rouge">font-size: 0;</code> 등은 스크린 리더도 인식하지 못 하기 떄문에 의미가 없음. CSS를 이용하여 지우기 <code class="language-plaintext highlighter-rouge">clip:rect()</code> 등)
<br /></p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">img</code>태그 사용 시 반드시 <code class="language-plaintext highlighter-rouge">alt</code> 속성을 사용하여 어떤 이미지인지 인식할 수 있도록 대체 텍스트를 제공해야 함.</li>
  <li>의미가 없는 장식용 이미지에는 <code class="language-plaintext highlighter-rouge">alt=""</code> 속성을 사용하여 빈 문자열로 설정해야 함.</li>
  <li>간혹 많은 양의 대체 텍스트를 제공해야 하는 경우에는 IR(Image Replacement)기법을 이용하여 마크업에서 대체 텍스트 작성 후 CSS를 통해 숨김.
    <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.blind</span> <span class="p">{</span>
<span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
<span class="nl">width</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
<span class="nl">height</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="nl">margin</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
<span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
<span class="nl">clip</span><span class="p">:</span> <span class="n">rect</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
<span class="nl">border</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>단, <code class="language-plaintext highlighter-rouge">visibility: hidden;, opacity: 0;, font-size: 0;</code> 등은 스크린 리더가 인식하지 못하기 때문에 사용하면 안됨. <br />
 ,<code class="language-plaintext highlighter-rouge">&lt;img&gt;</code>태그는 이미 이미지라는 의미를 갖고 있기 떄문에 대체 텍스트 내 ‘이미지’ 단어 사용은 중복임.</p>
  </li>
  <li>QR코드의 경우 <code class="language-plaintext highlighter-rouge">alt</code> 속성으로 해당 링크 주소까지 필수로 제공해야 함.</li>
  <li><code class="language-plaintext highlighter-rouge">longdesc</code> 속성은 HTML5부터 사용하지 않음.</li>
</ul>

<p><br /></p>

<h2 id="모든-기능은-키보드-조작만으로-사용할-수-있어야-한다">모든 기능은 키보드 조작만으로 사용할 수 있어야 한다.</h2>
<ul>
  <li>테이블에 대한 정보(이름, 유형, 분류, 내용, 날짜 등)를 <code class="language-plaintext highlighter-rouge">&lt;caption&gt;</code> 태그에 명시 후 경우에 따라 안 보이게 처리.</li>
  <li>단순 데이터용 테이블에는 <code class="language-plaintext highlighter-rouge">&lt;th&gt;</code> 요소를 제목 셀로 사용할 때 <code class="language-plaintext highlighter-rouge">scope="row"(행), scope="col"(열)</code> 속성을 사용하여 행과 열의 관계를 명시해야 함.</li>
</ul>

<p><br /></p>

<h2 id="콘텐츠는-색에-관계-없이-인식될-수-있어야-함">콘텐츠는 색에 관계 없이 인식될 수 있어야 함.</h2>
<ul>
  <li>탭 메뉴 등에서 글꼴 색상만 변화하는 경우 일부 색약 사용자가 구분하기 어럽기 때문에 추가적인 표시 방법을 제공해야 함.</li>
  <li>텍스트와 배경간 명도 대비는 4.5:1 이상이어야 함. <br />
<a href="https://sitero.co.kr/contrast">명도대비 계산 링크 바로가기(클릭)</a>
<img src="/assets/images/posts_img/web_accessibility/colorX.webp" alt="명도대비 부적합, +10쿠폰 박스의 텍스트, 배경간 명도대비가 2.917:1로 부적합 수준이다. 배경색은 연한 보라색, 텍스트는 흰색이다." />
<br />
<img src="/assets/images/posts_img/web_accessibility/colorO.webp" alt="명도대비 적합, +10%쿠폰박스의 텍스트, 배경간 명도대비가 11.607:1로 적합 수준이다. 배경은 진한 보라색, 텍스트는 흰색이다." /></li>
</ul>

<p><br /><br /></p>

<hr />

<p><br /><br /></p>

<h1 id="실제-사이트를-검사하며-새롭게-습득">실제 사이트를 검사하며 새롭게 습득</h1>

<h2 id="버튼에-대한-용도-설명-aria-label">버튼에 대한 용도 설명 <code class="language-plaintext highlighter-rouge">aria-label</code></h2>
<p>간혹 아이콘만으로 이루어진 버튼에 추가 설명이 제공되지 않는 경우가 있음. <br />
<img src="/assets/images/posts_img/web_accessibility/button_captionX.webp" alt="찜하기, 재입고 알림 아이콘 버튼의 설명이 제공되지 않아 스크린 리더에서 공란으로 표시됨" /> <br />
이 경우 스크린 리더에서 어떤 버튼인지 사용자에게 제공할 수 없음.
<br /><br />
다음과 같이 <code class="language-plaintext highlighter-rouge">aria-label</code> 속성을 사용하여 버튼의 용도를 설명해야 함.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">aria-label=</span><span class="s">"찜하기"</span><span class="nt">&gt;</span>
<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn"</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">aria-label=</span><span class="s">"재입고 알림"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<p><img src="/assets/images/posts_img/web_accessibility/button_captionO.webp" alt="마크업에 aria-label 속성을 추가하여 이제는 스크린 리더에서 버튼의 용도를 제공해줌" /></p>

<p><br /><br /></p>

<h2 id="div-ul-li-태그-등이-특정-기능을-한다면-role-속성을-사용하여-명시"><code class="language-plaintext highlighter-rouge">&lt;div&gt;, &lt;ul&gt;, &lt;li&gt;</code> 태그 등이 특정 기능을 한다면 <code class="language-plaintext highlighter-rouge">role</code> 속성을 사용하여 명시</h2>
<p>특정 기능을 하는 요소라면 <code class="language-plaintext highlighter-rouge">role="tab"</code> 등과 같이 기능을 명시해야 함.</p>

<p><br /><br /></p>

<h2 id="aria">ARIA</h2>

<p><br /><br />
<strong>참고링크</strong> <br />
<a href="https://velog.io/@leejpsd/CSS-IR-%EA%B8%B0%EB%B2%95">https://velog.io/@leejpsd/CSS-IR-%EA%B8%B0%EB%B2%95</a> <br />
<a href="https://tech.kakaopay.com/post/accessibility-stories-for-everyone/#%ED%91%9C">https://tech.kakaopay.com/post/accessibility-stories-for-everyone/#%ED%91%9C</a></p>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Research" /><category term="web_accessibility" /><category term="W3C" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">macOS에서 데스크톱 아이콘 가리기</title><link href="http://localhost:4000/hard-action/macos-desktio-icon-hidden/" rel="alternate" type="text/html" title="macOS에서 데스크톱 아이콘 가리기" /><published>2025-01-12T00:00:00+09:00</published><updated>2025-01-12T00:00:00+09:00</updated><id>http://localhost:4000/hard-action/macos-desktio-icon-hidden</id><content type="html" xml:base="http://localhost:4000/hard-action/macos-desktio-icon-hidden/"><![CDATA[<p>터미널 실행</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.finder CreateDesktop <span class="nt">-bool</span> FALSE<span class="p">;</span> killall Finder
</code></pre></div></div>

<p>복귀</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.finder CreateDesktop <span class="nt">-bool</span> TRUE<span class="p">;</span> killall Finder
</code></pre></div></div>
<p><br /><br /></p>

<p>터미널 없이 손쉽게 가려주는 유틸리티도 있지만 유료</p>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="hard-action" /><category term="macos" /><category term="terminal" /><summary type="html"><![CDATA[터미널 실행 defaults write com.apple.finder CreateDesktop -bool FALSE; killall Finder]]></summary></entry><entry><title type="html">React 시작 + 문제 해결</title><link href="http://localhost:4000/research/react-start/" rel="alternate" type="text/html" title="React 시작 + 문제 해결" /><published>2024-12-20T00:00:00+09:00</published><updated>2024-12-20T00:00:00+09:00</updated><id>http://localhost:4000/research/react-start</id><content type="html" xml:base="http://localhost:4000/research/react-start/"><![CDATA[<table>
  <tbody>
    <tr>
      <td><strong>참고 강의</strong></td>
      <td><a href="https://hwijaekim.github.io/eatopia2024" target="_blank">coding apple - React 리액트 기초부터 쇼핑몰 프로젝트까지!</a></td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p><strong><em>Node.js 사전설치 완료</em></strong> <br />
처음에는 <code class="language-plaintext highlighter-rouge">create-react-app</code> 명령어로 시도했지만 추후 vite를 이용함.</p>

<h1 id="vite를-이용한-react-프로젝트-생성">Vite를 이용한 React 프로젝트 생성</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm create vite@latest
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gimhwijae@gimhwijaeui-MacBookPro react01 % npm create vite@latest

<span class="o">&gt;</span> react01@0.0.0 npx
<span class="o">&gt;</span> create-vite

? Project name: › vite-project <span class="o">[</span>프로젝트명 입력]
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? Select a framework: › - Use arrow-keys. Return to submit.
❯   Vanilla
    Vue
    React
    Preact
    Lit
    Svelte
    Solid
    Qwik
    Angular
    Others
</code></pre></div></div>
<p>방향키를 사용해 React에서 엔터</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? Select a variant: › - Use arrow-keys. Return to submit.
❯   TypeScript
    TypeScript + SWC
    JavaScript
    JavaScript + SWC
    React Router v7 ↗
</code></pre></div></div>
<p>방향키를 이용해 JavaScript에서 엔터</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Scaffolding project <span class="k">in</span> /Users/gimhwijae/Git/react-practice/react01...

Done. Now run:

  <span class="nb">cd </span>react01
  npm <span class="nb">install
  </span>npm run dev

gimhwijae@gimhwijaeui-MacBookPro react-practice % 
</code></pre></div></div>
<p>다음 명령을 차례로 입력하여 실행</p>

<p><br /></p>

<h2 id="오류-빌생">오류 빌생</h2>
<p>macOS 환경에서 다음과 같은 오류가 발생함</p>
<blockquote>
  <p><sub><code class="language-plaintext highlighter-rouge">failed to load config from /Users/gimhwijae/Git/react-practice/react01/vite.config.js
error when starting dev server:
Error: Build failed with 3 errors:
(define name):1:0: ERROR: Expected identifier but found "import"
(define name):1:0: ERROR: Expected identifier but found "import"
(define name):1:0: ERROR: Expected identifier but found "import"
    at failureErrorWithLog (/Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:1476:15)
    at /Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:945:25
    at runOnEndCallbacks (/Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:1316:45)
    at buildResponseToResult (/Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:943:7)
    at /Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:970:16
    at responseCallbacks.&lt;computed&gt; (/Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:622:9)
    at handleIncomingPacket (/Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:677:12)
    at Socket.readFromStdout (/Users/gimhwijae/Git/react-practice/react01/node_modules/esbuild/lib/main.js:600:7)
    at Socket.emit (node:events:519:28)
    at addChunk (node:internal/streams/readable:559:12)</code></sub></p>
</blockquote>

<p><br /></p>

<h3 id="실패과정">실패과정</h3>
<p>Google 검색과 chatGPT를 이용하여 오류를 검색하고 많은 해결법을 시도해 봤지만 여전히 같은 오류가 발생했음. <br />
<br />
<strong>터미널 입력</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i react@18 react-dom@18
</code></pre></div></div>
<p>설명: 최근 출시된 리액트19 릴리즈에서 의존성 버전 문제를 일으킨 것으로 추정. 하지만 어디까지나 임시 해결책으로 장기적으로는 권장되지 않음. <br />
<br /></p>

<p>하지만 위와 같은 해결법은 임시 해결법으로 <strong>React 19 출시와 함께 의존성에 대한 오류</strong>가 발생한 것으로 추정되었음.</p>

<p><br /></p>

<h2 id="해결">해결</h2>
<p>Node.js버전은 당시 <strong>v20.17.0</strong>으로 공식적으로는 문제가 없었지만 마지막 방법으로 LTS최신버전인 <strong>v22.12.0</strong> 버전으로 업데이트 함. <br />
결과적으로 문제 없이 <code class="language-plaintext highlighter-rouge">npm run dev</code> 명령어가 작동하였으며 <code class="language-plaintext highlighter-rouge">localhost</code>로 잘 작동함. <br />
<br />
<img src="/assets/images/posts_img/install-react/vite+react.webp" alt="Vite + React" /></p>

<p><br /></p>

<p>하지만 여기서 드는 의문점은 <strong>Windows 환경.</strong> <br />
Windows에서의 Node.js 버전은 <strong>v20.17.0</strong>으로 <strong>macOS와 동일한 버전</strong>이지만 React 환경이 정상적으로 실행됐음 <br />
<img src="/assets/images/posts_img/install-react/win-node.webp" alt="win-node" />
<img src="/assets/images/posts_img/install-react/win-react.webp" alt="win-react" /></p>

<h2><br /></h2>
<p><br /></p>

<h1 id="프로젝트-시작">프로젝트 시작</h1>

<h2 id="기본-형식">기본 형식</h2>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">reactLogo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./assets/react.svg</span><span class="dl">'</span>
<span class="k">import</span> <span class="nx">viteLogo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">/vite.svg</span><span class="dl">'</span>
<span class="k">import</span> <span class="dl">'</span><span class="s1">./App.css</span><span class="dl">'</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"black-nav"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>Code Blog.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span>
</code></pre></div></div>
<p>기본이 되는 <code class="language-plaintext highlighter-rouge">App.jsx</code>파일. <br />
<code class="language-plaintext highlighter-rouge">return{}</code> 내부에 HTML을 작성하면 된다.
<br /><br />
*<code class="language-plaintext highlighter-rouge">JavaScript</code> 내에서 HTML을 작성할 수 있는 이유는 사실 해당 코드는 HTML이 아닌 JSX이기 때문.
하지만 우리에게 친숙한 HTML 문법을 사용하여 코드를 작성할 수 있도록 보여지는 것.</p>

<p><br /><br /></p>

<h2 id="jsx-내에서-클래스-선언">JSX 내에서 클래스 선언</h2>
<p><sub>틀린 예</sub></p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">classe</span><span class="p">=</span><span class="s">"black-nav"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>Code Blog.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>

<p><sub>옳은 예</sub></p>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">classeName</span><span class="p">=</span><span class="s">"black-nav"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>Code Blog.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</code></pre></div></div>
<p>JSX 내에서 클래스를 선언하기 위해 기존 HTML 문법과 같이 <code class="language-plaintext highlighter-rouge">class="test"</code>로 작성해서는 안 된다.
<br /><br />
기본적으로 JSX(JavaScript XML)는 마크업 언어인 HTML과는 다르게 프로그래밍 언어이기 때문에 CSS에서의 <code class="language-plaintext highlighter-rouge">class</code> 아닌 프로그래밍 부분의 <code class="language-plaintext highlighter-rouge">class</code>와 혼동될 수 있다.
<br /><br />
이러한 혼동을 막기 위해 JSX내에서 <code class="language-plaintext highlighter-rouge">div</code>에 클래스를 선언하기 위해서는 <code class="language-plaintext highlighter-rouge">className</code>으로 선언해야 한다.</p>

<p><br /><br /></p>

<h2 id="중괄호-문법">중괄호 문법</h2>
<p>JSX에서는 중괄호 문법을 이용하여 어디든 변수를 선언하고 삽입할 수 있다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">post</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">변수선언</span><span class="dl">'</span><span class="p">;</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">"black-nav"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>Code Blog.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span><span class="si">{</span> <span class="nx">post</span> <span class="si">}</span><span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>

      <span class="p">&lt;</span><span class="nt">h4</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span> <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">}</span> <span class="si">}</span><span class="p">&gt;</span>JSX에서 Inline Style은 다음과 같이 작성해야 합니다.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>위와 같이 <code class="language-plaintext highlighter-rouge">let post = '변수선언';</code>와 같이 변수를 선언한다. (문법 자체는 JS와 동일)
<br /><br />
다음 단계부터 JS와의 차이가 존재하는데 실제 JS에서 변수를 선언하고 HTML에 삽입하려면 <code class="language-plaintext highlighter-rouge">document.getElementbyID('title').innetHTML = '변수선언'</code>과 같이 길고 복잡한 코드를 작성해야 했지만 JSX에서는 <code class="language-plaintext highlighter-rouge">{ post }</code>만 작성하면 해당 변수가 삽입된다.</p>

<p><br /><br /></p>

<h2 id="jsx-내에서-인라인-스타일-작성">JSX 내에서 인라인 스타일 작성</h2>
<p>JSX에서 작성하는 인라인 스타일은 HTML과 유사하면서 차이가 존재한다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nt">h4</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span> <span class="p">{</span><span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">blue</span><span class="dl">'</span><span class="p">,</span> <span class="na">fontSize</span><span class="p">:</span> <span class="dl">'</span><span class="s1">24px</span><span class="dl">'</span><span class="p">}</span> <span class="si">}</span><span class="p">&gt;</span>JSX에서 Inline Style은 다음과 같이 작성해야 합니다.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>
</code></pre></div></div>
<p>기본적으로 중괄호가 추가된 모습이고 카멜케이스를 적용하여 작성해야 한다. <br />
예시. <code class="language-plaintext highlighter-rouge">font-size</code> -&gt;  <code class="language-plaintext highlighter-rouge">fontSize</code></p>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Research" /><category term="node.js" /><category term="npm" /><category term="react" /><summary type="html"><![CDATA[참고 강의 coding apple - React 리액트 기초부터 쇼핑몰 프로젝트까지!]]></summary></entry><entry><title type="html">Git 사용</title><link href="http://localhost:4000/research/git/" rel="alternate" type="text/html" title="Git 사용" /><published>2024-11-27T00:00:00+09:00</published><updated>2024-11-27T00:00:00+09:00</updated><id>http://localhost:4000/research/git</id><content type="html" xml:base="http://localhost:4000/research/git/"><![CDATA[<p><br /></p>

<h1 id="기본-사용">기본 사용</h1>
<h2 id="리포지토리-클론">리포지토리 클론</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone &lt;리포지토리 URL&gt;
</code></pre></div></div>

<h2 id="최신-상태로-업데이트">최신 상태로 업데이트</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin &lt;브렌치 이름&gt;
</code></pre></div></div>

<h2 id="커밋-및-푸시">커밋 및 푸시</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s1">'커밋메시지'</span>
git push
</code></pre></div></div>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Research" /><category term="git" /><summary type="html"><![CDATA[기본 사용 리포지토리 클론 git clone &lt;리포지토리 URL&gt;]]></summary></entry><entry><title type="html">웹인터랙션프로그래밍 교과목 프로젝트 [My Origin Wizard]</title><link href="http://localhost:4000/projects/code/web-interaction-final/" rel="alternate" type="text/html" title="웹인터랙션프로그래밍 교과목 프로젝트 [My Origin Wizard]" /><published>2024-11-22T00:00:00+09:00</published><updated>2024-11-22T00:00:00+09:00</updated><id>http://localhost:4000/projects/code/web-interaction-final</id><content type="html" xml:base="http://localhost:4000/projects/code/web-interaction-final/"><![CDATA[<style>
  .ico {
    border-radius: 5px;
    height: 30px;
    margin-bottom: 5px;
  }
</style>

<p><br /></p>
<h1 id="-나의-일대기-9가지-페이지를-javascript-기반의-상호작용-사이트로-제작">📝 나의 일대기 9가지 페이지를 JavaScript 기반의 상호작용 사이트로 제작</h1>

<table>
  <tbody>
    <tr>
      <td><strong>기간</strong></td>
      <td>2024.09 ~ 2024.12 (2-2학기)</td>
    </tr>
    <tr>
      <td><strong>인원</strong></td>
      <td>개인</td>
    </tr>
    <tr>
      <td><strong>담당분야</strong></td>
      <td>사이트 콘셉트 수립, 9개 콘텐츠 기획 및 기능구현</td>
    </tr>
    <tr>
      <td><strong>관련 링크</strong></td>
      <td><a href="https://hwijaekim.github.io/my-origin-wizard/index.html" target="_blank">https://hwijaekim.github.io/my-origin-wizard</a></td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<h1 id="-핵심-기술-요약">🔑 핵심 기술 요약</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">display: flex;</code>, <code class="language-plaintext highlighter-rouge">flex-flow: row wrap;</code> 스타일 적용으로 윈도우 크기변화에 따른 적절한 아이콘 배치</li>
  <li><code class="language-plaintext highlighter-rouge">JQuery UI</code> 사용으로 <code class="language-plaintext highlighter-rouge">index.html</code>에서 윈도우 창 드래그 기능 구현</li>
  <li><code class="language-plaintext highlighter-rouge">forEach</code>를 이용해 <code class="language-plaintext highlighter-rouge">index.html</code>에서 각 아이콘 클릭에 대한 페이지 전환을 자연스럽고 적은 양의 코드로 구현</li>
</ul>

<p><br /><br /></p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/sVCvbcAeFW4?si=-_R6b9hT8Qhtx_MY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
<p><br /><br /></p>

<h1 id="-주요-코드">📌 주요 코드</h1>
<h2 id="flex-아이콘-배치--jquery-ui를-이용한-드래그-구현"><code class="language-plaintext highlighter-rouge">flex</code> 아이콘 배치 + JQuery UI를 이용한 드래그 구현</h2>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">#win_contents</span> <span class="p">{</span>
    <span class="c">/*border: solid 1px red;*/</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">95%</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">90%</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">flex-flow</span><span class="p">:</span> <span class="n">row</span> <span class="n">wrap</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">baseline</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">$</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#win_container</span><span class="dl">'</span><span class="p">).</span><span class="nx">draggable</span><span class="p">();</span>
<span class="p">})</span>
</code></pre></div></div>
<p><img src="/assets/images/posts_img/web-interaction-final/2-1.webp" alt="2-1" /></p>

<h2 id="foreach로-각-9개의-아이콘을-클릭하여-페이지-전환-구현"><code class="language-plaintext highlighter-rouge">forEach</code>로 각 9개의 아이콘을 클릭하여 페이지 전환 구현</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//index.html에서 각 아이콘 클릭시 화면전환 기능 구현</span>
<span class="kd">const</span> <span class="nx">icons</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">.iconFlex</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">//총 9개의 iconFlex 클래스를 querySelectorAll 배열로 변수 지정</span>
<span class="kd">const</span> <span class="nx">popupBox</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">popup</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">//아이콘 클릭시 자연스럽게 전환될 수 있도록 popup id 변수 지정</span>

<span class="nx">icons</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">icon</span><span class="p">,</span><span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>  <span class="c1">//iconFlex div를 forEach, 클릭된 icon의 순서를 알기 위해 index를 추가로 선언</span>
    <span class="nx">icon</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>  <span class="c1">//icon을 클릭하면</span>
        <span class="nx">popupBox</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">active</span><span class="dl">'</span><span class="p">);</span>  <span class="c1">//미리 선언해둔 팝업 변수에 active클래스를 추가하여 keyframe애니메이션 재생</span>

        <span class="c1">//핵심 코드. popupBox에 active 클래스가 추가되고 1초 후 내부 코드 실행</span>
        <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="cm">/*
            * index페이지 전환 코드
            * 각 서브 페이지 이름은 1~9.html로 지정해 두었음
            * forEach에서 선언한 index값은 클릭한 icon의 순서
            * querySelectorAll로 불러온 배열은 0부터 시작하므로 클릭한 index에 1을 더함
            * 최종적으로 백틱을 사용하여 클릭한 icon에 대한 순서(index)값+1.html 파일을 1초 후 열도록 프로그래밍
            * ex. 6번째 아이콘을 클릭 -&gt; index값은 5 -&gt; 5+1 =&gt; 6.html 1초 후 전환
            * */</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s2">`./</span><span class="p">${</span><span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="s2">.html`</span><span class="p">;</span>
        <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>
<p><img src="/assets/images/posts_img/web-interaction-final/2-2.webp" alt="2-2" /></p>

<h2 id="svg의-path-내-속성값을-변경해-애니메이션을-구현">SVG의 path 내 속성값을 변경해 애니메이션을 구현</h2>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--SVG 중 일부--&gt;</span>
<span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">"bezier-control"</span> <span class="na">d=</span><span class="s">"M10.5 327C73 251.167 243.3 99.5 424.5 99.5C605.7 99.5 776.667 250.833 839.5 326.5"</span> <span class="na">stroke=</span><span class="s">"#D0D0D0"</span> <span class="na">stroke-width=</span><span class="s">"1.5"</span><span class="nt">/&gt;</span>

<span class="c">&lt;!--버튼--&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"btn-cluster"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"graph-btn"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"./sources/05motion/bezier_1.webp"</span> <span class="na">alt=</span><span class="s">"bezier_1"</span><span class="nt">&gt;&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"graph-btn"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"./sources/05motion/bezier_2.webp"</span> <span class="na">alt=</span><span class="s">"bezier_2"</span><span class="nt">&gt;&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"graph-btn"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"./sources/05motion/bezier_3.webp"</span> <span class="na">alt=</span><span class="s">"bezier_3"</span><span class="nt">&gt;&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"graph-btn"</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">"./sources/05motion/bezier_4.webp"</span> <span class="na">alt=</span><span class="s">"bezier_4"</span><span class="nt">&gt;&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// svg중 bezier 부분 path, 움직일 원, 버튼 4개를 변수로 선언</span>
<span class="kd">const</span> <span class="nx">bezierControl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">bezier-control</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">ballObj</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">ball</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">bezierBtn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">.graph-btn</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// NodeList로 나열된 bezierBtn을 forEach로 풀어주기</span>
<span class="nx">bezierBtn</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">btn</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">btn</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// 버튼 순서대로 클릭시 index값을 통해 if문으로 조작</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/*
            * 해당 변수 내 요소의 속성값을 변경할 수 있는 메서드.
            * (변수).setAttribute(속성명, 속성값);
            * */</span>
            <span class="nx">bezierControl</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span>
                <span class="c1">// 해당 변수 path 내 포함된 요소 "b"에 대한 속성값을 아래와 같이 변경한다.</span>
                <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">M10.5 327C73 251.167 243.3 99.5 424.5 99.5C605.7 99.5 776.667 250.833 839.5 326.5</span><span class="dl">"</span>
            <span class="p">);</span>
            <span class="c1">// 추가된 모든 클래스를 제거</span>
            <span class="nx">ballObj</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">bezierControl</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span>
                <span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">M10.5 327C43.5 327 132 99.5 214.5 99.5C335 99.5 332.5 326.5 839.5 326.5</span><span class="dl">"</span>
            <span class="p">);</span>
            <span class="c1">//추가된 모든 클래스를 제거하고 graph2 클래스를 add</span>
            <span class="nx">ballObj</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
            <span class="nx">ballObj</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">graph2</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>
<p><img src="/assets/images/posts_img/web-interaction-final/2-3.webp" alt="2-2" /></p>

<p><br /><br /></p>

<h1 id="️-사용-기술">🖥️ 사용 기술</h1>
<p><img class="ico" src="https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&amp;logo=html5&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&amp;logo=css3&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&amp;logo=JavaScript&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/GitHub-100000?style=for-the-badge&amp;logo=github&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/GIT-E44C30?style=for-the-badge&amp;logo=git&amp;logoColor=white" /></p>

<p><br /><br /></p>

<h1 id="️-총평">⌨️ 총평</h1>
<ul>
  <li>Good Parts
    <ul>
      <li>CSS와 JS를 통합하여 제작했을 때 발생할 수 있는 문제를 경험하고 해결</li>
      <li>HTML/CSS와 JS를 보다 긴밀하게 연결하여 여러 상호작용 요소를 구현</li>
      <li>코드 주석처리에 대한 습관</li>
      <li>SVG와 CSS Animation을 적극 활용</li>
    </ul>
  </li>
  <li>Bad Parts
    <ul>
      <li>구현 가능성과 시간분배로 인한 콘텐츠 타협</li>
    </ul>
  </li>
</ul>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Projects" /><category term="Code" /><category term="front-end" /><category term="html/css/js" /><summary type="html"><![CDATA[📝 나의 일대기 9가지 페이지를 JavaScript 기반의 상호작용 사이트로 제작]]></summary></entry><entry><title type="html">서버프로그래밍 교과목 기말 프로젝트 [유니픽스]</title><link href="http://localhost:4000/projects/code/server-programming-final/" rel="alternate" type="text/html" title="서버프로그래밍 교과목 기말 프로젝트 [유니픽스]" /><published>2024-11-21T00:00:00+09:00</published><updated>2024-11-21T00:00:00+09:00</updated><id>http://localhost:4000/projects/code/server-programming-final</id><content type="html" xml:base="http://localhost:4000/projects/code/server-programming-final/"><![CDATA[<style>
  .ico {
    border-radius: 5px;
    height: 30px;
    margin-bottom: 5px;
  }
</style>

<p><br /></p>
<h1 id="-nodejs와-mongodb를-이용한-컴퓨터-수리-예약-사이트-유니픽스">📝 Node.js와 MongoDB를 이용한 컴퓨터 수리 예약 사이트 [유니픽스]</h1>

<table>
  <tbody>
    <tr>
      <td><strong>기간</strong></td>
      <td>2024.11 ~ 2024.12  (2-2학기)</td>
    </tr>
    <tr>
      <td><strong>인원</strong></td>
      <td>개인</td>
    </tr>
    <tr>
      <td><strong>담당분야</strong></td>
      <td>개발환경 구축, MongoDB 연결, <code class="language-plaintext highlighter-rouge">multer</code>를 이용한 이미지 업로드, 그 외 요소 구현</td>
    </tr>
    <tr>
      <td><strong>관련 링크</strong></td>
      <td><sub>학습 교재</sub><br />고영희 저 Do it! Node.js 프로그래밍 입문<br />쉽고 빠르게 달리는 백엔드 개발 / 자바스크립트+노드제이에스+익스프레스+몽고DB로 개발 순서에 따라 직접 서버 만들기!</td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<h1 id="-핵심-기술-요약">🔑 핵심 기술 요약</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">js, Node.js, express, MongoDB</code>를 이용한 기초 express 서버 제작</li>
  <li><code class="language-plaintext highlighter-rouge">GET, POST, PUT, DELETE</code> 메서드를 요청하고 응답을 처리하는 메서드 구성</li>
  <li>템플릿 엔진으로 <code class="language-plaintext highlighter-rouge">ejs</code> 연결</li>
  <li><code class="language-plaintext highlighter-rouge">jsonwebtoken(JWT), cookie</code>를 이용한 비밀번호 암호화 및 토큰, 쿠키로 어드민 회원가입/로그인 관리</li>
  <li>어드민 계정과 전용 페이지</li>
  <li><code class="language-plaintext highlighter-rouge">multer</code>를 이용한 이미지 업로드</li>
</ul>

<p><br /><br /></p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/lcYLc4jGij4?si=4T4IaI89ezR3GTJH" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
<p><br /><br /></p>

<h1 id="-주요-코드">📌 주요 코드</h1>
<h2 id="npm-패키지">npm 패키지</h2>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"bcrypt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"cookie-parser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.4.7"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dotenv"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^16.4.5"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ejs"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.1.10"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.21.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express-async-handler"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express-ejs-layouts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.5.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"gridfs-stream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"install"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.13.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"jsonwebtoken"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^9.0.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"method-override"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"mongoose"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.8.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"multer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.4.5-lts.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"nodemon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.1.7"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"npm"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^10.9.0"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="env-설정"><code class="language-plaintext highlighter-rouge">env</code> 설정</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DB_CONNECT = mongodb+srv://(SECURITY).mongodb.net/unifixData
JWT_SECRET= (SECURITY)
</code></pre></div></div>

<h2 id="appjs-mainjs-adminjs-선언한-모듈"><code class="language-plaintext highlighter-rouge">app.js</code>, <code class="language-plaintext highlighter-rouge">main.js</code>, <code class="language-plaintext highlighter-rouge">admin.js</code> 선언한 모듈</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*====================app.js====================*/</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">).</span><span class="nx">config</span><span class="p">({</span> <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./path/to/.env</span><span class="dl">'</span> <span class="p">});</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">expressEjsLayouts</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-ejs-layouts</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">connectDb</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./config/db</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// DB 연결 함수 가져오기</span>
<span class="kd">const</span> <span class="nx">cookieParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">cookie-parser</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 쿠키 파서 가져오기</span>
<span class="kd">const</span> <span class="nx">methodOverride</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">method-override</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// 이미지 업로드 관련</span>
<span class="kd">const</span> <span class="nx">multer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">multer</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Image</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./models/Article</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3001</span>


<span class="cm">/*====================main.js====================*/</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">mainLayout</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">layouts/main</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/News</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Contact</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../models/Order</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Article</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../models/Article</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// const Image = require("../models/Images");</span>
<span class="kd">const</span> <span class="nx">asynchandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-async-handler</span><span class="dl">"</span><span class="p">);</span>


<span class="cm">/*====================amdin.js====================*/</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">adminLayout</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">layouts/admin</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">adminLayout2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">layouts/admin-nologout</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">asyncHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-async-handler</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">bcrypt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">bcrypt</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/User</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/News</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">jsonwebtoken</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">JWT_SECRET</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="메인mainjs-라우트">메인(<code class="language-plaintext highlighter-rouge">main.js</code>) 라우트</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// GET</span>
<span class="c1">// "/home" 라우트</span>
<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/order</span><span class="dl">"</span><span class="p">],</span>
  <span class="nx">asynchandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">contacts</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Contact</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="dl">"</span><span class="s2">order</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">contacts</span><span class="p">:</span> <span class="nx">contacts</span><span class="p">,</span> <span class="na">layout</span><span class="p">:</span> <span class="nx">mainLayout</span> <span class="p">});</span>  <span class="c1">//미리 설정한 레이아웃 사용</span>
  <span class="p">})</span>
<span class="p">);</span>

<span class="c1">// POST</span>
<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
        <span class="dl">"</span><span class="s2">/newOrder</span><span class="dl">"</span><span class="p">,</span>
        <span class="nx">asynchandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="p">{</span> <span class="nx">devicename</span><span class="p">,</span> <span class="nx">casewhat</span><span class="p">,</span> <span class="nx">sangtae</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">phone</span><span class="p">,</span> <span class="nx">email</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">devicename</span> <span class="o">||</span> <span class="o">!</span><span class="nx">casewhat</span> <span class="o">||</span> <span class="o">!</span><span class="nx">sangtae</span> <span class="o">||</span> <span class="o">!</span><span class="nx">name</span> <span class="o">||</span> <span class="o">!</span><span class="nx">phone</span> <span class="o">||</span> <span class="o">!</span><span class="nx">email</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">필수값이 입력되지 않았습니다.</span><span class="dl">'</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="kd">const</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Contact</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
            <span class="nx">devicename</span><span class="p">,</span>
            <span class="nx">casewhat</span><span class="p">,</span>
            <span class="nx">sangtae</span><span class="p">,</span>
            <span class="nx">name</span><span class="p">,</span>
            <span class="nx">phone</span><span class="p">,</span>
            <span class="nx">email</span><span class="p">,</span>
          <span class="p">});</span>
          <span class="c1">// res.status(201).send("사용자 데이터 생성됨");</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/order</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//mid add</span>
        <span class="p">})</span>
<span class="p">)</span>

<span class="c1">// PUT</span>
<span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">/order/:id</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">asynchandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">devicename</span><span class="p">,</span> <span class="nx">casewhat</span><span class="p">,</span> <span class="nx">sangtae</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">phone</span><span class="p">,</span> <span class="nx">email</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">contact</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Contact</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">contact</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">사용자 데이터 찾을 수 없음</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 수정</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">devicename</span> <span class="o">=</span> <span class="nx">devicename</span><span class="p">;</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">casewhat</span> <span class="o">=</span> <span class="nx">casewhat</span><span class="p">;</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">sangtae</span> <span class="o">=</span> <span class="nx">sangtae</span><span class="p">;</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">email</span> <span class="o">=</span> <span class="nx">email</span><span class="p">;</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">phone</span> <span class="o">=</span> <span class="nx">phone</span><span class="p">;</span>
    <span class="c1">// 저장</span>
    <span class="nx">contact</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
    <span class="c1">//mid add</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/order</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">})</span>
<span class="p">)</span>

<span class="c1">// DELETE</span>
<span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">/delete/:id</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">asynchandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">Contact</span><span class="p">.</span><span class="nx">deleteOne</span><span class="p">({</span><span class="na">_id</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">});</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">'</span><span class="s1">/order</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
<span class="p">);</span>
</code></pre></div></div>
<h2 id="어드민adminjs-인증-토큰">어드민(<code class="language-plaintext highlighter-rouge">admin.js</code>) 인증 토큰</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Check Login</span>
<span class="kd">const</span> <span class="nx">checkLogin</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">cookies</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span> <span class="c1">// 쿠키 정보 가져오기</span>

  <span class="c1">// 토큰이 없다면</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/admin</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 토큰이 있다면 토큰을 확인하고 사용자 정보를 요청에 추가</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">JWT_SECRET</span><span class="p">);</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">userId</span> <span class="o">=</span> <span class="nx">decoded</span><span class="p">.</span><span class="nx">userId</span><span class="p">;</span> <span class="c1">// res.userId가 아닌 req.userId에 저장</span>
    <span class="nx">next</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/admin</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// POST /admin</span>
<span class="c1">// 관리자 페이지 로그인</span>
<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
        <span class="dl">"</span><span class="s2">/admin</span><span class="dl">"</span><span class="p">,</span>
        <span class="nx">asyncHandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="p">{</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span> <span class="c1">// req.body에서 username과 password를 가져옴</span>

          <span class="c1">// 사용자 이름으로 사용자 찾기</span>
          <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">username</span> <span class="p">});</span>

          <span class="c1">// 일치하는 사용자가 없으면 에러 메시지 출력</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">일치하는 사용자가 없습니다.</span><span class="dl">"</span> <span class="p">});</span>
          <span class="p">}</span>
          <span class="kd">const</span> <span class="nx">isValidPassword</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>

          <span class="c1">// 비밀번호가 일치하지 않으면 에러 메시지 출력</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isValidPassword</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">비밀번호가 일치하지 않습니다.</span><span class="dl">"</span> <span class="p">});</span>
          <span class="p">}</span>

          <span class="c1">// JWT 토큰 생성</span>
          <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span> <span class="p">},</span> <span class="nx">JWT_SECRET</span><span class="p">);</span>

          <span class="c1">// JWT 토큰을 쿠키에 저장</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">,</span> <span class="nx">token</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="p">});</span>

          <span class="c1">// 로그인에 성공하면 전체 게시물 목록 페이지로 이동</span>
          <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="dl">"</span><span class="s2">/allPosts</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">})</span>
<span class="p">);</span>

<span class="c1">// 회원가입</span>
<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/register</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="dl">'</span><span class="s1">admin/register</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">layout</span><span class="p">:</span> <span class="nx">adminLayout2</span><span class="p">});</span>
<span class="p">})</span>


<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span>
        <span class="dl">'</span><span class="s1">/register</span><span class="dl">'</span><span class="p">,</span>
        <span class="nx">asyncHandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="p">{</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">password2</span><span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
          <span class="k">if</span><span class="p">(</span><span class="nx">password</span> <span class="o">===</span> <span class="nx">password2</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// bcrypt를 사용해 비밀번호를 암호화</span>
            <span class="kd">const</span> <span class="nx">hashedPassword</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hashedPassword</span><span class="p">);</span>
            <span class="c1">// 사용자 이름과 암호화된 비밀번호를 사용해서 새 사용자를 생성</span>
            <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">username</span><span class="p">,</span> <span class="na">password</span><span class="p">:</span> <span class="nx">hashedPassword</span><span class="p">});</span>
            <span class="c1">// 성공메시지 출력</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span><span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Register successful</span><span class="dl">"</span><span class="p">,</span> <span class="nx">user</span><span class="p">})</span>
          <span class="p">}</span>
          <span class="k">else</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">"</span><span class="s2">Register Failed</span><span class="dl">"</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/images/posts_img/server_programming/token.webp" alt="token" /></p>

<p><br /><br /></p>

<h1 id="️-사용-기술">🖥️ 사용 기술</h1>
<p><img class="ico" src="https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&amp;logo=html5&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&amp;logo=css3&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&amp;logo=JavaScript&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&amp;logo=node.js&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/npm-CB3837?style=for-the-badge&amp;logo=npm&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&amp;logo=mongodb&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/ejs-%23B4CA65.svg?style=for-the-badge&amp;logo=ejs&amp;logoColor=black" />
<img class="ico" src="https://img.shields.io/badge/express.js-%23404d59.svg?style=for-the-badge&amp;logo=express&amp;logoColor=%2361DAFB" />
<img class="ico" src="https://img.shields.io/badge/NODEMON-%23323330.svg?style=for-the-badge&amp;logo=nodemon&amp;logoColor=%BBDEAD" />
<img class="ico" src="https://img.shields.io/badge/JWT-black?style=for-the-badge&amp;logo=JSON%20web%20tokens" /></p>

<p><br /><br /></p>

<h1 id="️-총평">⌨️ 총평</h1>
<ul>
  <li><strong>Good Parts</strong>
    <ul>
      <li>기본적인 라우트 프로세스를 숙지</li>
      <li><code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">DELETE</code> 메서드를 요청, ejs템플릿엔진으로 렌더링</li>
      <li>스키마를 생성하고 MongoDB 데이터베이스와 연동 및 불러오기</li>
      <li><code class="language-plaintext highlighter-rouge">multer</code>를 이용한 이미지 업로드</li>
      <li>백엔드 프로세스에 대한 일부 기초적인 이해</li>
    </ul>
  </li>
  <li><strong>Bad Parts</strong>
    <ul>
      <li>사이트 메인 로그인 구현 부재</li>
      <li>처음 접하는 백엔드 프로세스로 다소 미흡함 존재</li>
      <li>일부 프로세스에 대한 이해 부족으로 완전히 소화하지 못 함</li>
    </ul>
  </li>
</ul>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Projects" /><category term="Code" /><category term="back-end" /><category term="node.js" /><category term="mongodb" /><category term="npm" /><summary type="html"><![CDATA[📝 Node.js와 MongoDB를 이용한 컴퓨터 수리 예약 사이트 [유니픽스]]]></summary></entry><entry><title type="html">서버프로그래밍 교과목 실습응용 [블로그 express 서버]</title><link href="http://localhost:4000/projects/code/union-server-programming/" rel="alternate" type="text/html" title="서버프로그래밍 교과목 실습응용 [블로그 express 서버]" /><published>2024-11-20T00:00:00+09:00</published><updated>2024-11-20T00:00:00+09:00</updated><id>http://localhost:4000/projects/code/union-server-programming</id><content type="html" xml:base="http://localhost:4000/projects/code/union-server-programming/"><![CDATA[<style>
  .ico {
    border-radius: 5px;
    height: 30px;
    margin-bottom: 5px;
  }
</style>

<p><br /></p>
<h1 id="-mongodb를-이용한-이미지-업로드를-지원하는-블로그-express-서버">📝 MongoDB를 이용한 이미지 업로드를 지원하는 블로그 express 서버</h1>

<table>
  <tbody>
    <tr>
      <td><strong>기간</strong></td>
      <td>2024.11 ~ 2024.12  (2-2학기)</td>
    </tr>
    <tr>
      <td><strong>인원</strong></td>
      <td>개인</td>
    </tr>
    <tr>
      <td><strong>담당분야</strong></td>
      <td>개발환경 구축, MongoDB 연결, <code class="language-plaintext highlighter-rouge">multer</code>를 이용한 이미지 업로드, 그 외 일부 <code class="language-plaintext highlighter-rouge">html, css</code>를 제외한 요소 구현</td>
    </tr>
    <tr>
      <td><strong>관련 링크</strong></td>
      <td><sub>학습 교재</sub><br />고영희 저 Do it! Node.js 프로그래밍 입문<br />쉽고 빠르게 달리는 백엔드 개발 / 자바스크립트+노드제이에스+익스프레스+몽고DB로 개발 순서에 따라 직접 서버 만들기!</td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<h1 id="-핵심-기술-요약">🔑 핵심 기술 요약</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">js, Node.js, express, MongoDB</code>를 이용한 기초 express 서버 제작</li>
  <li><code class="language-plaintext highlighter-rouge">GET, POST, PUT, DELETE</code> 메서드를 요청하고 처리</li>
  <li>요청/응답을 처리하는 미들웨어 구성</li>
  <li>템플릿 엔진으로 <code class="language-plaintext highlighter-rouge">ejs</code> 연결</li>
  <li><code class="language-plaintext highlighter-rouge">jsonwebtoken(JWT), cookie</code>를 이용한 비밀번호 암호화 및 토큰, 쿠키로 어드민 회원가입/로그인 관리</li>
  <li><code class="language-plaintext highlighter-rouge">multer</code>를 이용한 이미지 업로드</li>
</ul>

<p><br /><br /></p>
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/0P2YOqhIdNU?si=8fWrtM4jE-sBGi4U" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>
<p><br /><br /></p>

<h1 id="-주요-코드">📌 주요 코드</h1>
<h2 id="디렉토리-구조">디렉토리 구조</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── app.js
├── config
│   └── db.js
├── models
│   ├── Images.js
│   ├── Post.js
│   └── User.js
├── package-lock.json
├── package.json
├── public
│   ├── css
│   │   └── style.css
│   ├── img
│   │   ├── 000446340005_2.jpg
│   │   ├── 1.webp
│   │   ├── banner.jpg
│   │   └── logo.svg
│   └── scripts
├── routes
│   ├── admin.js
│   ├── main.js
├── uploads
└── views
    ├── about.ejs
    ├── addImage.ejs
    ├── admin
    │   ├── add.ejs
    │   ├── allPosts.ejs
    │   ├── edit.ejs
    │   └── index.ejs
    ├── index.ejs
    ├── layouts
    │   ├── admin-nologout.ejs
    │   ├── admin.ejs
    │   └── main.ejs
    └── post.ejs
</code></pre></div></div>

<h2 id="npm-패키지">npm 패키지</h2>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"bcrypt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"cookie-parser"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.4.7"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dotenv"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^16.4.5"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ejs"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.1.10"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.21.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express-async-handler"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"express-ejs-layouts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^2.5.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"gridfs-stream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.1.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"install"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.13.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"jsonwebtoken"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^9.0.2"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"method-override"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"mongoose"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^8.8.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"multer"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.4.5-lts.1"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"nodemon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^3.1.7"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"npm"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^10.9.0"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="env-설정">env 설정</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DB_CONNECT = mongodb+srv://(SECURITY).mongodb.net/myBlog
JWT_SECRET= (SECURITY)
</code></pre></div></div>

<h2 id="mainejs">main.ejs</h2>
<p><em>메인 레이아웃을 지정</em></p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ko"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;&lt;</span><span class="err">%=</span> <span class="na">locals.title</span> <span class="err">%</span><span class="nt">&gt;&lt;/title&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"description"</span> <span class="na">content=</span><span class="s">"My first application using Node.js, Express and MongoDB"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"/css/style.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>

    <span class="c">&lt;!-- 헤더 : 로고, 상단 메뉴, 로그인 --&gt;</span>
    <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"header"</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- 로고 --&gt;</span>
        <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/"</span> <span class="na">class=</span><span class="s">"header-logo"</span><span class="nt">&gt;</span>{ Geek Code }<span class="nt">&lt;/a&gt;</span>

        <span class="c">&lt;!-- 상단 메뉴 --&gt;</span>
        <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"header-nav"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;ul&gt;</span>
                <span class="nt">&lt;li&gt;</span>
                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/home"</span><span class="nt">&gt;</span>{ Home }<span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;</span>
                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/about"</span><span class="nt">&gt;</span>{ About }<span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;/li&gt;</span>
                <span class="nt">&lt;li&gt;</span>
                    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/upload"</span><span class="nt">&gt;</span>{ Upload }<span class="nt">&lt;/a&gt;</span>
                <span class="nt">&lt;/li&gt;</span>
            <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/nav&gt;</span>

        <span class="c">&lt;!-- 관리자 로그인 --&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"header-button"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/admin"</span><span class="nt">&gt;</span>관리자 로그인<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/header&gt;</span>

    <span class="c">&lt;!-- 메인 : 실제 내용이 들어갈 부분 --&gt;</span>
    <span class="nt">&lt;main</span> <span class="na">class=</span><span class="s">"main"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;</span><span class="err">%</span><span class="na">-</span> <span class="na">body</span> <span class="err">%</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/main&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h2 id="appjs-mainjs에-선언한-모듈">app.js, main.js에 선언한 모듈</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*==========app.js==========*/</span>
<span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">dotenv</span><span class="dl">'</span><span class="p">).</span><span class="nx">config</span><span class="p">({</span> <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./path/to/.env</span><span class="dl">'</span> <span class="p">});</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">expressEjsLayouts</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-ejs-layouts</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">connectDb</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">./config/db</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// DB 연결 함수 가져오기</span>
<span class="kd">const</span> <span class="nx">cookieParser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">cookie-parser</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// 쿠키 파서 가져오기</span>
<span class="kd">const</span> <span class="nx">methodOverride</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">method-override</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// 이미지 업로드 관련</span>
<span class="kd">const</span> <span class="nx">multer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">multer</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Image</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./models/Images</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3001</span> <span class="c1">// .env에 포트가 없으면 3001번 포트로 설정</span>



<span class="cm">/*==========main.js==========*/</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">mainLayout</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">layouts/main</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">Post</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../models/Post</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">asynchandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express-async-handler</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="routesmainjs-홈-라우트">routes/main.js » 홈 라우트</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// "/home" 라우트</span>
<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span>
  <span class="p">[</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/home</span><span class="dl">"</span><span class="p">],</span>  <span class="c1">//루트경로와 /home 경로에서 GET 요청 발생시 동작</span>
  <span class="nx">asynchandler</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>  <span class="c1">//비동기 처리</span>
    <span class="kd">const</span> <span class="nx">locals</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1">//title은 각 ejs의 타이틀명을 설정</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Home</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">};</span>
      <span class="cm">/**
       * MongoDB에서 데이터 조회 후 정렬.
       * 이때 .sort를 이용하여 최신순으로 재졍렬
       */</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">find</span><span class="p">().</span><span class="nx">sort</span><span class="p">({</span> <span class="na">updatedAt</span><span class="p">:</span> <span class="dl">"</span><span class="s2">desc</span><span class="dl">"</span><span class="p">,</span> <span class="na">createdAt</span><span class="p">:</span> <span class="dl">"</span><span class="s2">desc</span><span class="dl">"</span> <span class="p">});</span>

      <span class="cm">/**
       * mainLayout을 레이아웃 템플릿으로 사용.
       * const mainLayout = "layouts/main";
       */</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="dl">"</span><span class="s2">index</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="nx">locals</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="na">layout</span><span class="p">:</span> <span class="nx">mainLayout</span> <span class="p">});</span>
  <span class="p">})</span>
<span class="p">);</span>
</code></pre></div></div>

<p><br /><br /></p>

<h1 id="️-사용-기술">🖥️ 사용 기술</h1>
<p><img class="ico" src="https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&amp;logo=html5&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&amp;logo=css3&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&amp;logo=JavaScript&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/Node.js-43853D?style=for-the-badge&amp;logo=node.js&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/npm-CB3837?style=for-the-badge&amp;logo=npm&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/MongoDB-4EA94B?style=for-the-badge&amp;logo=mongodb&amp;logoColor=white" />
<img class="ico" src="https://img.shields.io/badge/ejs-%23B4CA65.svg?style=for-the-badge&amp;logo=ejs&amp;logoColor=black" />
<img class="ico" src="https://img.shields.io/badge/express.js-%23404d59.svg?style=for-the-badge&amp;logo=express&amp;logoColor=%2361DAFB" />
<img class="ico" src="https://img.shields.io/badge/NODEMON-%23323330.svg?style=for-the-badge&amp;logo=nodemon&amp;logoColor=%BBDEAD" />
<img class="ico" src="https://img.shields.io/badge/JWT-black?style=for-the-badge&amp;logo=JSON%20web%20tokens" /></p>

<p><br /><br /></p>

<h1 id="️-총평">⌨️ 총평</h1>
<ul>
  <li><strong>Good Parts</strong>
    <ul>
      <li>최초로 시도한 백엔드 프로세스</li>
      <li>Node.js와 npm 그리고 express서버 구축에 대한 기초를 경험</li>
    </ul>
  </li>
  <li><strong>Bad Parts</strong>
    <ul>
      <li>처음 경험하는 다소 높은 난이도의 백엔드 구축으로 완전히 본인의 것으로 소화하지 못 하여 지속적인 학습 필요</li>
      <li>능동적으로 코드를 이해하고 작성하는 것에 다소 미흡함이 존재</li>
    </ul>
  </li>
</ul>]]></content><author><name>김휘재 - KCT</name><email>dusan960766@gmail.com</email></author><category term="Projects" /><category term="Code" /><category term="back-end" /><category term="node.js" /><category term="mongodb" /><category term="npm" /><summary type="html"><![CDATA[📝 MongoDB를 이용한 이미지 업로드를 지원하는 블로그 express 서버]]></summary></entry></feed>